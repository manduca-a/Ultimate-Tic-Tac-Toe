%%%
%Input
%%%

Board(0..8).

%Esprime il concetto di "connessione" sulle board piccole
  %celle "connesse" sulla stessa riga
     ConnectedCells(0,0,0,1,0,2).
     ConnectedCells(1,0,1,1,1,2).
     ConnectedCells(2,0,2,1,2,2).
  %celle "connesse" sulla stessa colonna
     ConnectedCells(0,0,1,0,2,0).
     ConnectedCells(0,1,1,1,2,1).
     ConnectedCells(0,2,1,2,2,2).
  %celle "connesse" sulla diagonale maggiore
     ConnectedCells(0,0,1,1,2,2).
  %celle "connesse" sulla diagonale minore
     ConnectedCells(0,2,1,1,2,0).

%Esprime il concetto di "connessione" sulle board grandi
  %Board grandi "connesse" sulla stessa riga
     ConnectedBoards(0,1,2).
     ConnectedBoards(3,4,5).
     ConnectedBoards(6,7,8).
  %Board grandi "connesse" sulla stessa colonna
     ConnectedBoards(0,3,6).
     ConnectedBoards(1,4,7).
     ConnectedBoards(2,5,8).
  %Board grandi "connesse" sulla diagonale maggiore
     ConnectedBoards(0,4,8).
  %Board grandi "connesse" sulla diagonale minore
     ConnectedBoards(2,4,6).

%%%
%Guess & Check
%%%

InsertMarker(I,J,ID,V) | NotInsertMarker(I,J,ID,V) :- Marker(V), EmptyCell(I,J,ID), GridToPlay(ID).

InsertMarker(I,J,ID,V) | NotInsertMarker(I,J,ID,V) :- Marker(V), EmptyCell(I,J,ID), GridToPlay(-1).

 :- #count{ I,J,ID : InsertMarker(I,J,ID,_)} != 1.

 :- InsertMarker(I,J,ID,V), SubTris(ID,_), not CanTris(ID,I,J,V).

%%%
%Predicati ausiliari
%%%

SubTris(ID,V) :- CanTris(ID,I,J,V), InsertMarker(I,J,ID,V).

Draw(ID) :- #count{I,J : FullCell(I,J,ID,_)} = 8, InsertMarker(_,_,ID,V), not SubTris(ID,V).

 %Comprendere quando su una cella si è fatto tris.

%Esprime il concetto di poter fare Tris su una board "piccola"

 CanTris(ID,I2,J2,V) :- ConnectedCells(I,J,I1,J1,I2,J2), FullCell(I,J,ID,V), FullCell(I1,J1,ID,V), EmptyCell(I2,J2,ID).

 NewCanTris(ID,I2,J2,V) :- ConnectedCells(I,J,I1,J1,I2,J2), InsertMarker(I,J,ID,V), FullCell(I1,J1,ID,V), EmptyCell(I2,J2,ID).

%Esprime la possibilità di poter vincere nella board "grande"

 CanWin(ID2,I,J,V) :- SubTris(ID,V), SubTris(ID1,V), CanTris(ID2,I,J,V), ConnectedBoards(ID,ID1,ID2).

   %Esprime le che le "connessioni" sono reciproche tra celle.
     ConnectedCells(I2,J2,I,J,I1,J1) :- ConnectedCells(I,J,I1,J1,I2,J2).

  %Esprime le che le "connessioni" sono reciproche tra boards
     ConnectedBoards(ID2,ID,ID1) :- ConnectedBoards(ID,ID1,ID2).

%Esprime il conteggio dei segni tuoi e dell'avversario in una board

  EnemyMarkPerBoard(ID,N) :- Board(ID), EnemyMarker(V) , N = #count{ I,J : FullCell(I,J,ID,V)}.
  MarkPerBoard(ID,N) :- Board(ID), Marker(V), N = #count{ I,J : FullCell(I,J,ID,V)}.

%Esprime il concetto di avere una board in cui nessuno può fare tris

  NoWinnerBoard(ID) :- Board(ID), #count{ I,J,I1,J1,I2,J2 : TrisAvailable(I,J,I1,J1,I2,J2,ID,_)} = 0, not Draw(ID), not SubTris(ID,V), Marker(V), not SubTris(ID,M), EnemyMarker(M).

 UsefulBoard(Y) :- ConnectedBoards(X,Y,Z), SubTris(X,V), Marker(V), NoEnemyBoard(Y), NoEnemyBoard(Z).
 UsefulBoard(Z) :- ConnectedBoards(X,Y,Z), SubTris(X,V), Marker(V), NoEnemyBoard(Y), NoEnemyBoard(Z).

 NoEnemyBoard(ID) :- Board(ID), EnemyMarker(M), not SubTris(ID,M), not Draw(ID), not NoWinnerBoard(ID).

%Esprime il concetto che ancora nessuno ha bloccato quella board e si ci può ancora giocare

 BoardStillAvailable(ID) :- Board(ID), Marker(V), EnemyMarker(M), not SubTris(ID,V), not SubTris(ID,M), not Draw(ID).

%Esprime il concetto che esiste ancora una tripla di celle vuote o comunque in cui uno dei due può ancora fare tris.
 %usiamo più regole ma non sfruttiamo il connectedCells per evitare le ripetizioni che esso genera.
  TrisAvailable(I,J,I+1,J,I+2,J,ID,V) :- AvailableOrMarkedByYou(I,J,ID),AvailableOrMarkedByYou(I+1,J,ID),AvailableOrMarkedByYou(I+2,J,ID), Marker(V), BoardStillAvailable(ID).
  TrisAvailable(I,J,I,J+1,I,J+2,ID,V) :- AvailableOrMarkedByYou(I,J,ID),AvailableOrMarkedByYou(I,J+1,ID),AvailableOrMarkedByYou(I,J+2,ID), Marker(V), BoardStillAvailable(ID).
  TrisAvailable(I,J,I+1,J-1,I+2,J-2,ID,V) :- AvailableOrMarkedByYou(I,J,ID),AvailableOrMarkedByYou(I+1,J-1,ID),AvailableOrMarkedByYou(I+2,J-2,ID), Marker(V), BoardStillAvailable(ID).
  TrisAvailable(I,J,I+1,J+1,I+2,J+2,ID,V) :- AvailableOrMarkedByYou(I,J,ID),AvailableOrMarkedByYou(I+1,J+1,ID),AvailableOrMarkedByYou(I+2,J+2,ID), Marker(V), BoardStillAvailable(ID).

  TrisAvailable(I,J,I+1,J,I+2,J,ID,V) :- AvailableOrMarkedByEnemy(I,J,ID),AvailableOrMarkedByEnemy(I+1,J,ID),AvailableOrMarkedByEnemy(I+2,J,ID), EnemyMarker(V).
  TrisAvailable(I,J,I,J+1,I,J+2,ID,V) :- AvailableOrMarkedByEnemy(I,J,ID),AvailableOrMarkedByEnemy(I,J+1,ID),AvailableOrMarkedByEnemy(I,J+2,ID), EnemyMarker(V).
  TrisAvailable(I,J,I+1,J-1,I+2,J-2,ID,V):- AvailableOrMarkedByEnemy(I,J,ID),AvailableOrMarkedByEnemy(I+1,J-1,ID),AvailableOrMarkedByEnemy(I+2,J-2,ID), EnemyMarker(V).
  TrisAvailable(I,J,I+1,J+1,I+2,J+2,ID,V) :- AvailableOrMarkedByEnemy(I,J,ID),AvailableOrMarkedByEnemy(I+1,J+1,ID),AvailableOrMarkedByEnemy(I+2,J+2,ID), EnemyMarker(V).

%Unisce i concetti di celle piene o riempite in un unico predicato per compredere i tris ancora disponibili

  AvailableOrMarkedByYou(I,J,ID) :- EmptyCell(I,J,ID).
  AvailableOrMarkedByYou(I,J,ID) :- FullCell(I,J,ID,V), Marker(V).

  AvailableOrMarkedByEnemy(I,J,ID) :- EmptyCell(I,J,ID).
  AvailableOrMarkedByEnemy(I,J,ID) :- FullCell(I,J,ID,V), EnemyMarker(V).

%Esprime il concetto di avere delle celle "connesse" in cui almeno una è sicuramente riempita da noi e le altre o sono riempite da noi o sono vuote

  AtleastOne(I1,J1,I2,J2,ID) :- ConnectedCells(I,J,I1,J1,I2,J2),Marker(V), FullCell(I,J,ID,V), AvailableOrMarkedByYou(I1,J1,ID), AvailableOrMarkedByYou(I2,J2,ID).

%%%
%Strong Constraints extra
%%%

%Non è possibile che se puoi vincere non lo fai.

:- CanWin(ID,I,J,V), Marker(V), GridToPlay(ID), not InsertMarker(I,J,ID,V), InsertMarker(I1,J1,ID,V), not CanWin(ID,I1,J1,V), not SubTris(ID,V).
:- CanWin(ID,I,J,V), Marker(V), GridToPlay(-1), not InsertMarker(I,J,ID,V), InsertMarker(I1,J1,ID1,V), not CanWin(ID1,I1,J1,V), not SubTris(ID1,V).

%Deve giocare al centro se inizia a giocare (per il momento mi sembra onesto giocare al centro ma vedremo)

 :- Move(0), not InsertMarker(1,1,4,V), Marker(V).

%%%
%Weak Constraints
%%%

%Dovrebbe essere capace di fare tris quando possibile senza pagare se ne sceglie uno rispetto ad un altro

 :~ CanTris(ID,I,J,V), Marker(V), not InsertMarker(I,J,ID,V), InsertMarker(I1,J1,ID1,V), not CanTris(ID1,I1,J1,V).[30@1]

%Dovrebbe pagare se lo manda in una board vinta

 :~ InsertMarker(I,J,_,_), SubTris(ID,_), ID = I*3+J.[45@1]

 :~ InsertMarker(I,J,_,_), Draw(ID), ID = I*3+J.[45@1]

%Dovrebbe pagare se lo manda nella board centrale ed essa non è vinta

 :~ InsertMarker(I,J,_,_), I*3+J = 4, BoardStillAvailable(I*3+J).[15@1]

%Dovrebbe pagare se lo mandi in una board dove l'avversario può fare tris.

 :~ InsertMarker(I,J,ID,_), CanTris(I*3+J,_,_,V), EnemyMarker(V), ID != I*3+J.[20@1]

 :~ InsertMarker(I,J,ID,_), #count{I1,J1 : CanTris(ID,I1,J1,V)} = 1, EnemyMarker(V), I*3+J = ID, not CanTris(ID,I,J,V).[20@1]

 :~ InsertMarker(I,J,ID,_), I*3+J = ID, #count{I1,J1 : CanTris(ID,I1,J1,V)} > 1, EnemyMarker(V).[20@1]

% Paga se può giocare ovunque, l'avversario ha un CanWin e non lo blocca.

 :~ GridToPlay(-1), CanWin(ID,I,J,V), EnemyMarker(V), not InsertMarker(I,J,ID,M), Marker(M), InsertMarker(I1,J1,ID1,M), not CanWin(ID1,I1,J1,V).[75@1]

 %Dovrebbe pagare se lo mandi in una board in cui puoi fare tris.

 :~ CanTris(ID,_,_,V), not SubTris(ID,V), Marker(V), InsertMarker(I,J,_,_), I*3+J = ID.[25@1]
 :~ NewCanTris(ID,_,_,V), InsertMarker(I,J,_,V), I*3+J = ID.[25@1]

%Dovrebbe pagare se lo mandi in una board dove l'avversario ha messo più marker di te.

 :~ InsertMarker(I,J,_,_), EnemyMarkPerBoard(I*3+J,N), MarkPerBoard(I*3+J,M), M < N, Move(G), G < 20.[5@1]

%Dovrebbe pagare se l'avversario può fare tris e lui non lo blocca.

 :~ CanTris(ID,I,J,V), EnemyMarker(V), not InsertMarker(I,J,ID,M),Marker(M),InsertMarker(I1,J1,ID1,_), not CanTris(ID1,I1,J1,V), not CanTris(ID1,I1,J1,M).[35@1]

%Dovrebbe cercare di mandarlo in board in cui nessuno può vincere se possibile.

 :~ NoWinnerBoard(ID), InsertMarker(I,J,_,_), I*3+J != ID.[60@1]

%Dovrebbe cercare di mettere marker in celle dove è ancora possibile fare tris.

 :~ InsertMarker(I,J,ID,V), #count{ I1,J1 : AtleastOne(I,J,I1,J1,ID)} = M, #count{ I2,J2 : AtleastOne(I2,J2,I,J,ID)} = N.[10-M-N@1]

%Dovrebbe pagare se manda l'avversario in una board in cui posso vincere.

 :~ InsertMarker(I,J,ID,V), not CanWin(ID,I,J,V), CanWin(ID1,_,_,V), ID1 = I*3+J.[1@3]

%Dovrebbe pagare se manda l'avversario in una board dove può vincere.

 :~ InsertMarker(I,J,ID,_), CanWin(I*3+J,_,_,V), EnemyMarker(V), ID != I*3+J.[3@3]
 :~ InsertMarker(I,J,ID,_), #count{I1,J1 : CanWin(ID,I1,J1,V)} = 1, EnemyMarker(V), I*3+J = ID, not CanWin(ID,I,J,V).[3@3]
 :~ InsertMarker(I,J,ID,_), I*3+J = ID, #count{I1,J1 : CanWin(ID,I1,J1,V)} > 1, EnemyMarker(V).[3@3]

%Dovrebbe evitare di mandarlo a giocare dove vuole se può vincere o puoi vincere giocando in qualche board

 :~ InsertMarker(I,J,_,_), SubTris(I*3+J,_), CanWin(ID,_,_,_), I*3+J != ID, BoardStillAvailable(ID).[2@3]
 :~ InsertMarker(I,J,_,_), Draw(I*3+J), CanWin(ID,_,_,_), I*3+J != ID, BoardStillAvailable(ID).[2@3]

% evito le connected cells dove il nemico ha conquistato una o più boards, è pari o nessuno può vincere.
 :~ ConnectedBoards(X,Y,Z), SubTris(X,V), GridToPlay(-1), InsertMarker(_,_,ID,V), Y!=ID, Z!=ID, NoEnemyBoard(Y), NoEnemyBoard(Z), not UsefulBoard(ID). [15@1]
