cell(0..2).

bigBoard_cell(0..8).
smallBoard_cell(0..2, 0..2).

%% fatti per le linee di vincita con due marker consecutivi o con buco in mezzo

line(0, 0, 0, 1). line(0, 0, 0, 2). line(0, 1, 0, 2).
line(1, 0, 1, 1). line(1, 0, 1, 2). line(1, 1, 1, 2).   %%  controlli orizzontali
line(2, 0, 2, 1). line(2, 0, 2, 2). line(2, 1, 2, 2).

line(0, 0, 1, 0). line(0, 1, 1, 1). line(0, 2, 1, 2).
line(0, 0, 2, 0). line(0, 1, 2, 1). line(0, 2, 2, 2).   %%  controlli verticali
line(1, 0, 2, 0). line(1, 1, 2, 1). line(1, 2, 2, 2).

line(0, 0, 1, 1). line(0, 0, 2, 2). line(1, 1, 2, 2).
line(0, 2, 1, 1). line(0, 2, 2, 0). line(1, 1, 2, 0).   %%  controlli diagonali


%%  fatti per verificare tre marker in fila

tris(0, 0, 0, 1, 0, 2). tris(1, 0, 1, 1, 1, 2). tris(2, 0, 2, 1, 2, 2).
tris(0, 0, 1, 0, 2, 0). tris(0, 1, 1, 1, 2, 1). tris(0, 2, 1, 2, 2, 2).
tris(0, 0, 1, 1, 2, 2). tris(0, 2, 1, 1, 2, 0).

tris(A, B, C, D, E, F) :- tris(A, B, E, F, C, D).
tris(A, B, C, D, E, F) :- tris(E, F, A, B, C, D).
tris(A, B, C, D, E, F) :- tris(E, F, C, D, A, B).

angolo(0, 0). angolo(0, 2). angolo(2,0). angolo(2, 2).

angoliO(X, Y, J, K) :- angolo(X, Y), angolo(J, K), X!=J.
angoliO(X, Y, J, K) :- angolo(X, Y), angolo(J, K), Y!=K.

angoliT(0, 0, 2, 2, 2, 0). angoliT(0, 0, 2, 2, 0, 2). angoliT(0, 2, 2, 0, 0, 0). angoliT(0, 2, 2, 0, 2, 2). angoliT(2, 0, 0, 2, 0, 0). angoliT(2, 0, 0, 2, 2, 2). angoliT(2, 2, 0, 0, 0, 2). angoliT(2, 2, 0, 0, 2, 0).
angoliT(0, 0, 2, 0, 2, 2). angoliT(0, 0, 0, 2, 2, 2). angoliT(0, 2, 0, 0, 2, 0). angoliT(0, 2, 2, 2, 2, 0). angoliT(2, 0, 0, 0, 0, 2). angoliT(2, 0, 2, 2, 0, 2). angoliT(2, 2, 0, 2, 0, 0). angoliT(2, 2, 2, 0, 0, 0).


lato(0,1). lato(1,0). lato(1,2). lato(2, 1).
latoO(0,1,2,1). latoO(1,0,1,2). latoO(1,2,1,0). latoO(2,1,0,1).

strategia(0,0,0,1,1,1). strategia(0,2,0,1,1,1). strategia(2,0,2,1,1,1). strategia(2,2,2,1,1,1).                                 % strategia(AB, CD, EF)
strategia(0,0,1,1,0,1). strategia(0,2,1,1,0,1). strategia(2,0,1,1,2,1). strategia(2,2,1,1,2,1).                                 % strategia(AB, EF, CD)
strategia(0,1,0,0,1,1). strategia(0,1,0,2,1,1). strategia(2,1,2,0,1,1). strategia(2,1,2,2,1,1).                                 % strategia(EF, AB, CD)
strategia(0,1,1,1,0,0). strategia(0,1,1,1,0,2). strategia(2,1,1,1,2,0). strategia(2,1,1,1,2,2).                                 % strategia(EF, CD, AB)
strategia(1,1,0,1,0,0). strategia(1,1,0,1,0,2). strategia(1,1,2,1,2,0). strategia(1,1,2,1,2,2).                                 % strategia(CD, AB, EF)
strategia(1,1,0,0,0,1). strategia(1,1,0,2,0,1). strategia(1,1,2,0,2,1). strategia(1,1,2,2,2,1).                                 % strategia(CD, EF, AB)




%%%     GUESS & CHECK

mossa_definitiva(X, Y, A) | not_mossa_definitiva(X, Y, A) :- possible_move(A, X, Y).

:- #count{A, C, D : mossa_definitiva(A, C, D)} != 1.



%%  Definisco la prossima smallBoard in cui si giocherà

next_playingSmallBoard(F) :- mossa_definitiva(X, Y, _), bigBoard_cell(F), F=3*X+Y.


enemy_marker(X) :- marker(Y), X=-Y.

occupiedCell(A, X, Y) :- smallBoard_State(A, X, Y, _).
empty(A, X, Y) :- not occupiedCell(A, X, Y), bigBoard_cell(A), smallBoard_cell(X, Y).




%%%  2.  Controllo se ci sono due marker IA in fila o con un buco e vado a vincere

viciniO(A, X, Y, J, K) :- playingSmallBoard(A), line(X, Y, J, K), smallBoard_State(A, X, Y, M), marker(M), smallBoard_State(A, J, K, M).

    %% Salvo in viciniO la bigBoard e le due celle della smallBoard con i valori

    %%%    Controllo che la cella per giocare sia libera


possible_movew(A, G, I) :- not cantplay(A), viciniO(A, X, Y, J, K), tris(G, I, X, Y, J, K), empty(A, G, I).
possible_movew(A, G, I) :- not cantplay(A), viciniO(A, X, Y, J, K), tris(X, Y, G, I, J, K), empty(A, G, I).
possible_movew(A, G, I) :- not cantplay(A), viciniO(A, X, Y, J, K), tris(X, Y, J, K, G, I), empty(A, G, I).


       possible_move(A, X, Y) :- possible_movew(A, X, Y).


%%%  2.2.   Controllo se in qualche board IA può vincere

viciniO_OB(A, X, Y, J, K) :- not playingSmallBoard(A), line(X, Y, J, K), smallBoard_State(A, X, Y, M), marker(M), smallBoard_State(A, J, K, M).




%%%  3.  Controllo se ci sono due marker avversario in fila o con un buco e vado contrastare

viciniX(A, X, Y, J, K) :- playingSmallBoard(A), line(X, Y, J, K), smallBoard_State(A, X, Y, M), enemy_marker(M), smallBoard_State(A, J, K, M).

    %% Salvo in viciniX la cella della bigBoard e le due celle della smallBoard con i valori

    %%%   Controllo che la cella per giocare sia libera

possible_movec(A, G, I) :- not cantplay(A), viciniX(A, X, Y, J, K), tris(G, I, X, Y, J, K), empty(A, G, I).
possible_movec(A, G, I) :- not cantplay(A), viciniX(A, X, Y, J, K), tris(X, Y, G, I, J, K), empty(A, G, I).
possible_movec(A, G, I) :- not cantplay(A), viciniX(A, X, Y, J, K), tris(X, Y, J, K, G, I), empty(A, G, I).


       possible_move(A, X, Y) :- possible_movec(A, X, Y).

%%%   3.2.   Controllo se in qualche board l'avversario può vincere

viciniX_OB(A, X, Y, J, K) :- not playingSmallBoard(A), line(X, Y, J, K), smallBoard_State(A, X, Y, M), enemy_marker(M), smallBoard_State(A, J, K, M).



%%%   3.5  se l'IA ha giocato a lato continua al centro o al lato opposto

possible_move_inlato(A, X, Y) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, J, K, M), marker(M), latoO(J, K, X, Y), empty(A, X, Y).
possible_move_inlato(A, 1, 1) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, J, K, M), marker(M), lato(J, K), empty(A, 1, 1).

possible_move(A, X, Y) :- possible_move_inlato(A, X, Y).
%% ok




%%%   3.7   Strategie

possible_move_strategy(A, X, Y) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, J, K, M), smallBoard_State(A, C, D, M), marker(M), strategia(J, K, C, D, X, Y), empty(A, X, Y).
possible_move_strategy2(A, X, Y) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, J, K, M), marker(M), strategia(J, K, C, D, X, Y), empty(A, X, Y).

possible_move(A, X, Y) :- possible_move_strategy(A, X, Y).
possible_move(A, X, Y) :- possible_move_strategy2(A, X, Y).




%%%  4.   Se l'avversario gioca all'angolo e l'IA al centro, poi l'IA deve giocare ad un angolo

possible_movel(A, X, Y) :- not cantplay(A), playingSmallBoard(A), empty(A, X, Y), angolo(X, Y), smallBoard_State(A, 1, 1, M), marker(M), smallBoard_State(A, J, K, N), angolo(J, K), enemy_marker(N).

possible_move(A, X, Y) :- possible_movel(A, X, Y).
%% ok




%%%  5.   Inizio mettendo all'angolo se sono il primo a giocare

conteggio(N) :- #count{Y, X : smallBoard_State(A, X, Y, _), playingSmallBoard(A)}=N.

possible_moveAng(A, X, Y) :- angolo(X, Y), not cantplay(A), playingSmallBoard(A), conteggio(N), N<1.

possible_move(A, X, Y) :- possible_moveAng(A, X, Y).
%% ok




%%%  5.5.   Controllo se IA ha giocato nell'angolo ora gioca a quello opposto

possible_move_AngOpp(A, J, K):- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, X, Y, M), marker(M), angoliO(X, Y, J, K), empty(A, J, K).

possible_move(A, X, Y) :- possible_move_AngOpp(A, X, Y).
%% ok




%%%  6.   Se IA gioca in due angoli opposti e il centro è occupato, va a giocare nel terzo angolo per avere 2 possibilità

possible_move_Ang3(A, X, Y) :- not cantplay(A), playingSmallBoard(A), angoliT(C, D, E, F, X, Y), marker(M), smallBoard_State(A, C, D, M), smallBoard_State(A, E, F, M), empty(A, X, Y).

possible_move(A, X, Y) :- possible_move_Ang3(A, X, Y).
%% ok




%%%  7.   Controllo se l'avversario ha giocato al centro e non ci sono altre mosse faccio la mossa nell'angolo

solo_una_avversario(A) :- playingSmallBoard(A), not #count{Y, X:smallBoard_State(A, X, Y, M), enemy_marker(M)}>1, not #count{Y, X : smallBoard_State(A, X, Y, M), marker(M)}>0.

possible_moveAngC(A, X, Y) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, 1, 1, M), enemy_marker(M), empty(A, X, Y), angolo(X, Y), solo_una_avversario(A).

possible_move(A, X, Y) :- possible_moveAngC(A, X, Y).
%% ok




%%%  7.2   Controllo se l'avversario ha giocato a lato rispondo al centro

possible_move_c(A, 1, 1) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, X, Y, M), enemy_marker(M), lato(X, Y), empty(A, 1, 1).

possible_move(A, X, Y) :- possible_move_c(A, X, Y).
%% ok




%%%  7.5.   Controllo se l'avversario ha giocato nell'angolo faccio la mossa al centro

possible_move_c(A, 1, 1) :- not cantplay(A), playingSmallBoard(A), smallBoard_State(A, X, Y, M), angolo(X, Y), enemy_marker(M), empty(A, 1, 1).

possible_move(A, X, Y) :- possible_move_c(A, X, Y).
%% ok




%%%  7.75   Mossa casuale

possible_move_random(A, X, Y) :- not possible_movew(A, X, Y), not possible_movec(A, X, Y), not possible_move_inlato(A, X, Y), not possible_move_strategy(A, X, Y), not possible_move_strategy2(A, X, Y), not possible_movel(A, X, Y), not possible_moveAng(A, X, Y), not possible_moveAngC(A, X, Y), not possible_move_c(A, X, Y), not possible_move_Ang3(A, X, Y), not possible_move_AngOpp(A, X, Y), not cantplay(A), playingSmallBoard(A), empty(A, X, Y), bigBoard_cell(A), smallBoard_cell(X, Y), #count{K,J : smallBoard_State(A, J, K, _), playingSmallBoard(A)}>0.

possible_move(A, X, Y) :- possible_move_random(A, X, Y).
%% ok




%%%  8.   Controllo se bisogna giocare in tutte le BigBoard e quella da scegliere non è già vinta, se in una Board IA può vincere, sceglierà quella

neverywhere :- playingSmallBoard(_).     % non ovunque se c'è un qualsiasi playingSmallBoard
cantplay(A) :- won(A, _).                 % non in (A, B) se è già vinta da qualcuno
possible_move_O(A, X, Y) :- not neverywhere, not cantplay(A), empty(A, X, Y), bigBoard_cell(A), smallBoard_cell(X, Y).
        %% se posso giocare ovunque e se quella bigBoard_cell non è già vinta e se quella smallBoard_cell è vuota

possible_move(A, X, Y) :- possible_move_O(A, X, Y).
%% ok




%%%  WEAK COSTRAINTS

:~ not_mossa_definitiva(X, Y, A), possible_movew(A, X, Y). [2@7]                                      %   scartare una mossa vincente è costoso

:~ not_mossa_definitiva(X, Y, A), possible_movec(A, X, Y). [1@7]                                      %   scartare una mossa contrastante è meno costoso rispetto a scartare la vincente

:~ next_playingSmallBoard(A), viciniX_OB(A, _, _, _, _). [2@6]                                                    %   preferibile non avere avversario con turno dove ha due marker vicini
:~ next_playingSmallBoard(A), viciniO_OB(A, _, _, _, _). [1@6]

:~ not_mossa_definitiva(X, Y, A), possible_move_O(A, X, Y), viciniO_OB(A, _, _, _, _). [2@6]                   %   preferibile non scartare una board dove IA potrebbe vincere quando si gioca ovunque
:~ not_mossa_definitiva(X, Y, A), possible_move_O(A, X, Y), viciniX_OB(A, _, _, _, _). [1@6]

:~ not_mossa_definitiva(X, Y, A), possible_move_O(A, X, Y), viciniO_OB(A, J, K, B, C), tris(B, C, J, K, X, Y). [4@6]        %   scartare una mossa in una board dove IA vince costsa tanto

:~ mossa_definitiva(X, Y, A), possible_move_random(A, X, Y). [15@4]                                   %   prendere una mossa casuale è costoso e lo si fa in casi estremi
:~ mossa_definitiva(X, Y, A), possible_move_random(A, X, Y), not angolo(X, Y). [16@4]                  %   prenderla non all'angolo o al centro è meno preferibile
:~ mossa_definitiva(X, Y, A), possible_move_random(A, X, Y), X!=1, Y!=1. [16@4]

:~ not_mossa_definitiva(X, Y, A), possible_moveAng(A, X, Y). [10@4]                                    %   essere il primo a giocare e non farlo nell'angolo è costoso

:~ mossa_definitiva(X, Y, A), possible_move_strategy(A, X, Y). [5@4]
:~ mossa_definitiva(X, Y, A), possible_move_strategy2(A, X, Y). [5@4]

:~ mossa_definitiva(X, Y, A), possible_move_AngOpp(A, X, Y). [1@4]                                %   se si deve giocare all'angolo opposto e non si fa, costa tanto

:~ mossa_definitiva(X, Y, A), possible_move_Ang3(A, X, Y). [1@4]                                  %   se si deve giocare al terzo angolo opposto e non si fa, costa tanto

:~ not_mossa_definitiva(X, Y, A), possible_moveAngC(A, X, Y). [11@4]                                   %   contrasto la prima mossa al centro dell'avversario

:~ mossa_definitiva(X, Y, A), possible_move_O(A, X, Y). [1@1]

:~ mossa_definitiva(X, Y, A), possible_move_c(A, X, Y). [3@4]

:~ next_playingSmallBoard(A), won(A, _). [1@3]                                                        %   preferibile non avere l'avversario che sceglie la board






#show mossa_definitiva/3.